<!-- ## Interacting with stored data files -->

<!-- The purpose of a data repository is to enable researchers to store and share data. -->
<!-- Databrary aims to go a step further by allowing researchers to interact with -- to visualize and analyze -- the data they or others have stored on the system. -->
<!-- The `databraryapi` package includes several commands to make this easy to do. -->

<!-- Let's begin by listing all of the sessions (dates and times when data was collected) in volume 1. -->
<!-- Most of the `databraryapi` commands have default values so you can explore how the functions work. -->
<!-- In this case, the `list_sessions()` command has a default value of `vol.id = 1`. -->

<!-- ```{r list-vol-1-sessions} -->
<!-- list_sessions() -->
<!-- ``` -->

<!-- So, this volume contains a lot of sessions, `r dim(list_sessions())[1]` in fact. -->

<!-- Let's peak inside one of them, the `list_sessions()[22, 'name']` also referenced by session ID `r list_sessions()[22,'id']`. -->
<!-- These session IDs are unique identifiers we'll need for accessing the files contained inside. -->
<!-- So, let's see what's inside session `r list_sessions()[22,'id']`. -->

<!-- ```{r list-session-assets} -->
<!-- this_session <- list_sessions()[22,'session.id'] -->
<!-- this_vol <- list_sessions()[22,'vol.id'] -->
<!-- list_assets_in_session(session.id = this_session, vol.id = this_vol) -->
<!-- ``` -->

<!-- Notice that I took row 22 and the value of the `session.id` column to specify the `session.id` value for the `list_assets_in_session()` function. -->
<!-- I did the same for the `vol.id`. -->
<!-- I took these values from the output of `list_sessions()`. -->
<!-- The `asset.id` column in this table is the *asset* or file level ID. -->

<!-- Clearly, there are several files here, `r dim(list_assets_in_session(session.id = this_session, vol.id = this_vol))[1]` in fact. -->
<!-- And all are videos. -->
<!-- How do I know that? -->
<!-- Well, the `format` column has all '-800' values in it. -->
<!-- That doesn't help; you say. -->
<!-- Oh, right, here's how to link Databrary's file or 'asset' types to their format identifiers: -->

<!-- ```{r get-databrary-file-types} -->
<!-- get_supported_file_types() -->
<!-- ``` -->

<!-- See now that '-800' has `mimetype` of `video/mp4`? -->
<!-- This list shows us all of the currently supported file types. -->
<!-- Knowing them, we can make more meaningful searches for materials we want. -->

<!-- Let's find all of the 'pdf' documents in volume 1: -->

<!-- ```{r find-pdfs-volume-1} -->
<!-- head(list_assets_by_type(volume = 1, type = "pdf")) -->
<!-- ``` -->

<!-- I used the `head()` command to show you only the top of the list because I knew there are a large number of PDF files here. -->

<!-- ### Finding volumes with videos -->

<!-- Databrary is a video data library, so you may naturally be interested in what volumes have videos. -->
<!-- The `get_video_stats()` command comes in handy here. -->
<!-- Let's see about the video content available in volume 1. -->

<!-- ```{r videos-in-volume-1} -->
<!-- get_video_stats(volume = 1) -->
<!-- ``` -->

<!-- So, there's quite a lot to view there. But what about some other volumes? -->
<!-- This code uses the `lapply()` command from base R to run the `get_video_stats()` command across a list of volumes, specifically volumes 1 to 5. -->
<!-- It also uses the `rbind.fill()` command from the `plyr` package to merge the list of data frames into a single one that is easy to read. -->
<!-- **Note:** The following takes a few moments to run, so please be patient while it does. -->

<!-- ```{r videos-in-volumes-1-to-5} -->
<!-- plyr::rbind.fill(lapply(1:5, get_video_stats)) -->
<!-- ``` -->

<!-- So, there's a lot of video to view and reuse. -->
